import React, { useState, useEffect, useRef, ReactNode } from 'react';
import { Link, useHistory } from 'react-router-dom';
import { FiMenu, FiX, FiChevronDown, FiUser, FiShoppingBag, FiLogOut, FiSettings, FiCode, FiLayers, FiMonitor, FiSmartphone, FiSearch, FiTrendingUp, FiGlobe, FiDatabase, FiCloud, FiBarChart2, FiAward, FiZap } from 'react-icons/fi';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuth } from '../../contexts/AuthContext';

interface ServiceItemProps {
  to: string;
  icon: ReactNode;
  title: string;
  description: string;
  color: string;
  badge?: string;
  onClose: () => void;
}

const ServiceItem: React.FC<ServiceItemProps> = ({ to, icon, title, description, color, badge, onClose }) => {
  const colorClasses = {
    purple: 'from-purple-50 to-white text-purple-600 hover:from-purple-600 hover:text-white group-hover/item:text-white',
    blue: 'from-blue-50 to-white text-blue-600 hover:from-blue-600 hover:text-white group-hover/item:text-white',
    pink: 'from-pink-50 to-white text-pink-600 hover:from-pink-600 hover:text-white group-hover/item:text-white',
    green: 'from-green-50 to-white text-green-600 hover:from-green-600 hover:text-white group-hover/item:text-white',
    indigo: 'from-indigo-50 to-white text-indigo-600 hover:from-indigo-600 hover:text-white group-hover/item:text-white',
    yellow: 'from-yellow-50 to-white text-yellow-600 hover:from-yellow-600 hover:text-white group-hover/item:text-white',
  };

  const badgeColors = {
    Popular: 'bg-purple-100 text-purple-800',
    Trending: 'bg-blue-100 text-blue-800',
    New: 'bg-green-100 text-green-800',
  };

  return (
    <Link 
      to={to}
      className={`flex items-center px-4 py-3 text-sm group/item transition-all duration-200 hover:bg-gradient-to-r ${colorClasses[color as keyof typeof colorClasses] || ''}`}
      onClick={(e) => {
        e.stopPropagation();
        onClose();
      }}
    >
      <div className={`p-2 mr-3 rounded-lg transition-colors ${colorClasses[color as keyof typeof colorClasses].split(' ')[0]} group-hover/item:bg-opacity-100`}>
        {icon}
      </div>
      <div className="flex-1 min-w-0">
        <div className="flex items-center justify-between">
          <span className="font-medium truncate">{title}</span>
          {badge && (
            <span className={`text-xs px-2 py-0.5 rounded-full ml-2 ${badgeColors[badge as keyof typeof badgeColors] || 'bg-gray-100 text-gray-800'}`}>
              {badge}
            </span>
          )}
        </div>
        <div className="text-xs text-gray-500 group-hover/item:text-white/80 truncate">
          {description}
        </div>
      </div>
    </Link>
  );
};

const Navbar: React.FC = () => {
  const { user, loading, signOut } = useAuth();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const [servicesDropdown, setServicesDropdown] = useState(false);
  const [accountDropdown, setAccountDropdown] = useState(false);
  const [mobileAccountDropdown, setMobileAccountDropdown] = useState(false);
  const [visible, setVisible] = useState(true);
  const [prevScrollPos, setPrevScrollPos] = useState(0);
  const [localLoading, setLocalLoading] = useState(true);
  const [avatarLoaded, setAvatarLoaded] = useState(false);
  const history = useHistory();
  const accountDropdownRef = useRef<HTMLDivElement>(null);
  
  // Set a timeout to prevent getting stuck on loading
  useEffect(() => {
    const timer = setTimeout(() => {
      setLocalLoading(false);
    }, 2000); // 2 seconds timeout
    
    return () => clearTimeout(timer);
  }, []);
  
  // Update local loading state when auth loading changes
  useEffect(() => {
    if (!loading) {
      setLocalLoading(false);
    }
  }, [loading]);

  useEffect(() => {
    const handleScroll = () => {
      const currentScrollPos = window.scrollY;
      const offset = window.scrollY;
      
      // Determine if scrolled down enough for style change
      if (offset > 50) {
        setScrolled(true);
      } else {
        setScrolled(false);
      }
      
      // Determine scroll direction for visibility
      const isScrollingDown = prevScrollPos < currentScrollPos;
      const isScrollingUp = prevScrollPos > currentScrollPos;
      
      // Show navbar when at top, scrolling up, or menu is open
      if (currentScrollPos < 10 || isScrollingUp || isMenuOpen) {
        setVisible(true);
      } else if (isScrollingDown && currentScrollPos > 100) {
        // Hide navbar when scrolling down and not at the top
        setVisible(false);
      }
      
      setPrevScrollPos(currentScrollPos);
    };

    window.addEventListener('scroll', handleScroll);
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [prevScrollPos, isMenuOpen]);
  
  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      // Close account dropdown when clicking outside
      if (accountDropdown) {
        const target = event.target as HTMLElement;
        if (accountDropdownRef.current && !accountDropdownRef.current.contains(target)) {
          setAccountDropdown(false);
        }
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [accountDropdown]);
  
  // Handle sign out
  const handleSignOut = async () => {
    try {
      await signOut();
      setAccountDropdown(false);
      history.push('/');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const [isServicesHovering, setIsServicesHovering] = useState(false);
  const [isAccountHovering, setIsAccountHovering] = useState(false);
  const [servicesCloseTimeout, setServicesCloseTimeout] = useState<NodeJS.Timeout | null>(null);
  const [accountCloseTimeout, setAccountCloseTimeout] = useState<NodeJS.Timeout | null>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const openServicesDropdown = () => {
    if (servicesCloseTimeout) {
      clearTimeout(servicesCloseTimeout);
      setServicesCloseTimeout(null);
    }
    setServicesDropdown(true);
  };

  const closeServicesDropdown = () => {
    const timeout = setTimeout(() => {
      if (!isServicesHovering) {
        setServicesDropdown(false);
      }
    }, 200);
    setServicesCloseTimeout(timeout);
  };

  // Handle click on mobile
  const handleServicesMobileClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    setServicesDropdown(prev => !prev);
  };

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        closeServicesDropdown();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      if (servicesCloseTimeout) clearTimeout(servicesCloseTimeout);
    };
  }, [isServicesHovering]);

  // Account Dropdown Handlers
  const openAccountDropdown = () => {
    if (accountCloseTimeout) {
      clearTimeout(accountCloseTimeout);
      setAccountCloseTimeout(null);
    }
    setAccountDropdown(true);
  };

  const closeAccountDropdown = () => {
    const timeout = setTimeout(() => {
      if (!isAccountHovering) {
        setAccountDropdown(false);
      }
    }, 200);
    setAccountCloseTimeout(timeout);
  };

  const handleAccountMobileClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    setAccountDropdown(prev => !prev);
  };

  // Close account dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (accountDropdownRef.current && !accountDropdownRef.current.contains(event.target as Node)) {
        closeAccountDropdown();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      if (accountCloseTimeout) clearTimeout(accountCloseTimeout);
    };
  }, [isAccountHovering]);

  return (
    <>
      {/* Floating Navbar */}
      <div className={`fixed w-full z-50 top-3 px-4 transition-transform duration-300 ${visible ? 'translate-y-0' : '-translate-y-32'}`}>
        <nav className={`transition-all duration-500 max-w-4xl mx-auto rounded-full ${scrolled ? 'bg-white/95 backdrop-blur-md shadow-xl py-2' : 'bg-white/90 backdrop-blur-sm py-2 shadow-lg'}`}>
          <div className="px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center">
              <div className="flex items-center">
                <Link to="/" className="flex-shrink-0">
                  <div className="p-1 transition-all duration-300">
                    <img 
                      src="https://res.cloudinary.com/dlvxjnycr/image/upload/v1747402280/a-logo-design-featuring-the-text-quicksi_CifZevJ7Sammm7AHdhV0Sw_SyfaagIaQPK5czYYfc-VCQ_iwzml0.jpg" 
                      alt="Quick Site Lab Logo" 
                      className="h-10 w-auto rounded-full" 
                    />
                  </div>
                </Link>
              </div>
              
              {/* Desktop menu */}
              <div className="hidden md:flex md:items-center md:space-x-1">
                <Link to="/" className="px-3 py-2 text-sm font-medium text-gray-800 hover:text-primary transition-all duration-200">
                  Home
                </Link>
                <div 
                  className="relative group"
                  ref={dropdownRef}
                  onMouseEnter={openServicesDropdown}
                  onMouseLeave={closeServicesDropdown}
                >
                  <button 
                    onClick={handleServicesMobileClick}
                    className="flex items-center px-4 py-2.5 text-sm font-medium text-gray-800 hover:text-primary transition-all duration-300 group relative overflow-hidden"
                  >
                    <span className="relative z-10 flex items-center">
                      <span className="mr-2">Services</span>
                      <FiChevronDown className={`transition-transform duration-300 ease-out ${servicesDropdown ? 'rotate-180' : ''}`} />
                    </span>
                    <span className="absolute bottom-0 left-1/2 w-0 h-0.5 bg-gradient-to-r from-purple-500 to-blue-500 transition-all duration-300 group-hover:w-full group-hover:left-0"></span>
                  </button>
                  
                  <AnimatePresence>
                    {(servicesDropdown || isServicesHovering) && (
                      <motion.div 
                        initial={{ opacity: 0, y: 10, scale: 0.98 }}
                        animate={{ opacity: 1, y: 0, scale: 1 }}
                        exit={{ opacity: 0, y: 10, scale: 0.98 }}
                        transition={{ duration: 0.2, ease: [0.4, 0, 0.2, 1] }}
                        className={`absolute left-0 mt-2 w-72 bg-white/95 backdrop-blur-xl rounded-xl shadow-2xl py-3 z-50 border border-gray-100/50 overflow-hidden`}
                        onMouseEnter={() => setIsServicesHovering(true)}
                        onMouseLeave={() => {
                          setIsServicesHovering(false);
                          closeServicesDropdown();
                        }}
                      >
                        <div className="px-4 py-3 bg-gradient-to-r from-purple-50 to-blue-50 border-b border-gray-100">
                          <h3 className="text-sm font-semibold text-gray-800 flex items-center">
                            <FiZap className="text-purple-500 mr-2" />
                            Our Services
                          </h3>
                          <p className="text-xs text-gray-500 mt-1">Transform your ideas into reality</p>
                        </div>
                        
                        <div className="max-h-[400px] overflow-y-auto custom-scrollbar">
                          <ServiceItem 
                            to="/services/web-development" 
                            icon={<FiGlobe className="h-5 w-5" />}
                            title="Web Development"
                            description="Custom websites & web applications"
                            color="purple"
                            badge="Popular"
                            onClose={closeServicesDropdown}
                          />
                          
                          <ServiceItem 
                            to="/services/mobile-apps" 
                            icon={<FiSmartphone className="h-5 w-5" />}
                            title="Mobile Apps"
                            description="iOS & Android development"
                            color="blue"
                            badge="Trending"
                            onClose={closeServicesDropdown}
                          />
                          
                          <ServiceItem 
                            to="/services/ui-ux-design" 
                            icon={<FiLayers className="h-5 w-5" />}
                            title="UI/UX Design"
                            description="Beautiful, intuitive interfaces"
                            color="pink"
                            onClose={closeServicesDropdown}
                          />
                          
                          <ServiceItem 
                            to="/services/digital-marketing" 
                            icon={<FiTrendingUp className="h-5 w-5" />}
                            title="Digital Marketing"
                            description="Grow your online presence"
                            color="green"
                            onClose={closeServicesDropdown}
                          />
                          
                          <ServiceItem 
                            to="/services/cloud-solutions" 
                            icon={<FiCloud className="h-5 w-5" />}
                            title="Cloud Solutions"
                            description="Scalable cloud infrastructure"
                            color="indigo"
                            badge="New"
                            onClose={closeServicesDropdown}
                          />
                          
                          <ServiceItem 
                            to="/services/analytics" 
                            icon={<FiBarChart2 className="h-5 w-5" />}
                            title="Analytics"
                            description="Data-driven insights"
                            color="yellow"
                            onClose={closeServicesDropdown}
                          />
                        </div>
                        
                        <div className="px-4 py-2.5 border-t border-gray-100 bg-gray-50/50">
                          <Link 
                            to="/services" 
                            className="w-full flex items-center justify-between px-3.5 py-2 text-sm font-medium text-gray-700 hover:text-white hover:bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg transition-all duration-300 group/view-all"
                            onClick={(e) => {
                              e.stopPropagation();
                              closeServicesDropdown();
                            }}
                          >
                            <span>View all services</span>
                            <span className="flex items-center justify-center w-5 h-5 rounded-full bg-white text-purple-600 group-hover/view-all:bg-white/20 group-hover/view-all:text-white transition-colors">
                              <FiChevronDown className="h-3.5 w-3.5 transform group-hover/view-all:translate-x-0.5 transition-transform" />
                            </span>
                          </Link>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
                
                {/* Service Item Component */}
                <style>{`
                  .custom-scrollbar::-webkit-scrollbar {
                    width: 6px;
                    height: 6px;
                  }
                  .custom-scrollbar::-webkit-scrollbar-track {
                    background: #f1f1f1;
                    border-radius: 10px;
                  }
                  .custom-scrollbar::-webkit-scrollbar-thumb {
                    background: #c7d2fe;
                    border-radius: 10px;
                  }
                  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                    background: #a5b4fc;
                  }
                `}</style>
                
                {/* Service Item Component */}
                <Link to="/about" className="px-3 py-2 text-sm font-medium text-gray-800 hover:text-primary transition-all duration-200">
                  About
                </Link>
                <Link to="/portfolio" className="px-3 py-2 text-sm font-medium text-gray-800 hover:text-primary transition-all duration-200">
                  Portfolio
                </Link>
              </div>
              
              {/* Account Dropdown */}
              <div 
                className="relative ml-4 account-dropdown"
                onMouseEnter={openAccountDropdown}
                onMouseLeave={closeAccountDropdown}
                ref={accountDropdownRef}
              >
                {!localLoading && user ? (
                  <button
                    onClick={handleAccountMobileClick}
                    className="flex items-center space-x-2 focus:outline-none"
                    aria-expanded={accountDropdown}
                    aria-haspopup="true"
                  >
                    <div className="h-9 w-9 rounded-full overflow-hidden bg-purple-100 border-2 border-purple-200 flex items-center justify-center shadow-sm hover:shadow-md transition-all duration-200">
                      {user.user_metadata?.avatar_url ? (
                        <img 
                          src={user.user_metadata.avatar_url} 
                          alt="Profile" 
                          className={`h-full w-full object-cover transition-opacity duration-300 ${avatarLoaded ? 'opacity-100' : 'opacity-0'}`}
                          onLoad={() => setAvatarLoaded(true)}
                        />
                      ) : (
                        <span className="text-purple-600 font-bold text-lg">
                          {user.email?.charAt(0).toUpperCase() || 'U'}
                        </span>
                      )}
                    </div>
                    <span className="hidden md:block text-gray-700 font-medium hover:text-purple-600 transition-colors duration-200">
                      {user.user_metadata?.full_name || user.email?.split('@')[0] || 'Profile'}
                    </span>
                    <FiChevronDown className={`transition-transform duration-300 text-gray-500 group-hover/account:text-purple-600 ${accountDropdown ? 'transform rotate-180 text-purple-600' : ''}`} />
                  </button>
                ) : (
                  <button
                    onClick={handleAccountMobileClick}
                    className="flex items-center text-gray-700 hover:text-purple-600 transition-colors duration-200 font-medium px-3 py-2 rounded-lg hover:bg-gray-50 group/account relative"
                    aria-expanded={accountDropdown}
                    aria-haspopup="true"
                  >
                    <span className="absolute -bottom-1 left-0 w-0 h-0.5 bg-gradient-to-r from-purple-500 to-blue-500 transition-all duration-300 group-hover/account:w-full"></span>
                    <span className="mr-1">Account</span>
                    <FiChevronDown className={`transition-transform duration-300 ${accountDropdown ? 'transform rotate-180 text-purple-600' : ''}`} />
                  </button>
                )}
                
                {/* Account Dropdown Menu */}
                {(accountDropdown || isAccountHovering) && (
                  <motion.div
                    initial={{ opacity: 0, y: 10, scale: 0.98 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    exit={{ opacity: 0, y: 10, scale: 0.98 }}
                    transition={{ duration: 0.2, ease: [0.4, 0, 0.2, 1] }}
                    className="absolute right-0 mt-2 w-64 bg-white/95 backdrop-blur-xl rounded-xl shadow-2xl py-3 z-50 border border-gray-100/50 overflow-hidden"
                    onMouseEnter={() => setIsAccountHovering(true)}
                    onMouseLeave={() => {
                      setIsAccountHovering(false);
                      closeAccountDropdown();
                    }}

                  >
                    {user ? (
                      <>
                        <div className="px-4 py-3 bg-gradient-to-r from-purple-50 to-blue-50 border-b border-gray-100">
                          <div className="flex items-center">
                            <div className="h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center text-purple-600 mr-3">
                              {user.user_metadata?.avatar_url ? (
                                <img 
                                  src={user.user_metadata.avatar_url} 
                                  alt="Profile" 
                                  className="h-full w-full rounded-full object-cover"
                                />
                              ) : (
                                <span className="font-bold">
                                  {user.email?.charAt(0).toUpperCase() || 'U'}
                                </span>
                              )}
                            </div>
                            <div>
                              <p className="text-sm font-medium text-gray-900">{user.user_metadata?.full_name || user.email?.split('@')[0] || 'User'}</p>
                              <p className="text-xs text-gray-600">View Profile</p>
                            </div>
                          </div>
                        </div>
                        <Link
                          to="/account"
                          className="flex items-center px-4 py-2.5 text-sm text-gray-700 hover:bg-gradient-to-r hover:from-purple-50 hover:to-blue-50 hover:text-purple-600 transition-all duration-200 group/item"
                          onClick={closeAccountDropdown}
                        >
                          <div className="p-1.5 mr-3 rounded-md bg-purple-50 text-purple-600 group-hover/item:bg-purple-100 transition-colors">
                            <FiUser className="h-4 w-4" />
                          </div>
                          <span>Your Profile</span>
                        </Link>
                        <Link
                          to="/account/orders"
                          className="flex items-center px-4 py-2.5 text-sm text-gray-700 hover:bg-gradient-to-r hover:from-purple-50 hover:to-blue-50 hover:text-purple-600 transition-all duration-200 group/item"
                          onClick={closeAccountDropdown}
                        >
                          <div className="p-1.5 mr-3 rounded-md bg-blue-50 text-blue-600 group-hover/item:bg-blue-100 transition-colors">
                            <FiShoppingBag className="h-4 w-4" />
                          </div>
                          <span>Your Orders</span>
                        </Link>
                        <Link
                          to="/account/settings"
                          className="flex items-center px-4 py-2.5 text-sm text-gray-700 hover:bg-gradient-to-r hover:from-purple-50 hover:to-blue-50 hover:text-purple-600 transition-all duration-200 group/item"
                          onClick={closeAccountDropdown}
                        >
                          <div className="p-1.5 mr-3 rounded-md bg-green-50 text-green-600 group-hover/item:bg-green-100 transition-colors">
                            <FiSettings className="h-4 w-4" />
                          </div>
                          <span>Settings</span>
                        </Link>
                        <div className="border-t border-gray-100 pt-1 pb-1.5">
                          <button
                            onClick={handleSignOut}
                            className="w-full text-left flex items-center px-4 py-2.5 text-sm text-red-600 hover:bg-gradient-to-r hover:from-red-50 hover:to-pink-50 hover:text-red-700 rounded-lg transition-all duration-200 group/item"
                          >
                            <div className="p-1.5 mr-3 rounded-md bg-red-50 text-red-600 group-hover/item:bg-red-100 transition-colors">
                              <FiLogOut className="h-4 w-4" />
                            </div>
                            <span>Sign out</span>
                          </button>
                        </div>
                      </>
                    ) : (
                      <>
                        <Link
                          to="/login"
                          className="flex items-center px-4 py-3 text-gray-700 hover:bg-purple-50 hover:text-purple-600 transition-colors duration-200"
                          onClick={() => {
                            closeAccountDropdown();
                            setAccountDropdown(false);
                          }}
                        >
                          <FiUser className="h-5 w-5 mr-3 text-gray-500" />
                          Login
                        </Link>
                        <Link
                          to="/signup"
                          className="flex items-center px-4 py-3 text-gray-700 hover:bg-purple-50 hover:text-purple-600 transition-colors duration-200"
                          onClick={() => setAccountDropdown(false)}
                        >
                          <FiUser className="h-5 w-5 mr-3 text-gray-500" />
                          Sign Up
                        </Link>
                      </>
                    )}
                )}
              </div>
              
              <div className="hidden md:flex items-center space-x-4">
                <Link 
                  to="/get-started" 
                  className="inline-flex items-center justify-center px-6 py-2.5 rounded-full shadow-lg text-sm font-bold text-white bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-indigo-500/30 font-['Rubik']"
                >
                  Get Started <span className="ml-1">Ã¢â€ â€™</span>
                </Link>
              </div>
            
              {/* Mobile menu button */}
              <div className="flex md:hidden">
                <motion.button
                  onClick={toggleMenu}
                  className="inline-flex items-center justify-center p-2.5 rounded-full bg-white/90 backdrop-blur-sm shadow-lg hover:shadow-xl hover:bg-white transition-all duration-300 border-2 border-indigo-100"
                  whileTap={{ scale: 0.9 }}
                  whileHover={{ scale: 1.1 }}
                  initial={{ opacity: 0.9 }}
                  animate={{ opacity: 1 }}
                >
                  <span className="sr-only">Open main menu</span>
                  <motion.div
                    animate={{ rotate: isMenuOpen ? 90 : 0 }}
                    transition={{ duration: 0.3 }}
                    className="text-indigo-600 h-6 w-6 flex items-center justify-center"
                  >
                    {isMenuOpen ? (
                      <FiX className="stroke-2" size={24} aria-hidden="true" />
                    ) : (
                      <FiMenu className="stroke-2" size={24} aria-hidden="true" />
                    )}
                  </motion.div>
                </motion.button>
              </div>
            </div>
          </div>
        </nav>
      </div>

      {/* Mobile menu, show/hide based on menu state */}
      <AnimatePresence>
      {isMenuOpen && (
        <motion.div 
          className="md:hidden fixed top-24 inset-x-4 z-50"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          transition={{ duration: 0.3 }}
        >
          <motion.div 
            className="bg-white/95 backdrop-blur-md shadow-xl rounded-2xl overflow-hidden border border-gray-100"
            initial={{ scale: 0.95 }}
            animate={{ scale: 1 }}
            transition={{ duration: 0.2, delay: 0.1 }}>
            <div className="pt-4 pb-5 space-y-2 px-6">
              <Link
                to="/"
                className="block px-5 py-3 text-base font-medium text-gray-700 hover:text-primary rounded-xl hover:bg-gray-50 transition-all duration-200"
                onClick={toggleMenu}
              >
                Home
              </Link>
              <div>
                <button
                  onClick={handleServicesMobileClick}
                  className="flex justify-between items-center w-full px-5 py-3 text-base font-medium text-gray-700 hover:text-primary rounded-xl hover:bg-gray-50 transition-all duration-200"
                >
                  <span>Services</span>
                  <FiChevronDown className={`transition-transform duration-300 ${servicesDropdown ? 'transform rotate-180 text-primary' : ''}`} />
                </button>
                {servicesDropdown && (
                  <div className="pl-5 space-y-1 mt-2 mb-2 bg-gray-50/50 rounded-xl py-2">
                    <Link
                      to="/services/web-development"
                      className="block px-5 py-2.5 text-sm text-gray-600 hover:text-primary rounded-lg hover:bg-white"
                      onClick={toggleMenu}
                    >
                      Web Development
                    </Link>
                    <Link
                      to="/services/ui-ux-design"
                      className="block px-5 py-2.5 text-sm text-gray-600 hover:text-primary rounded-lg hover:bg-white"
                      onClick={toggleMenu}
                    >
                      UI/UX Design
                    </Link>
                    <Link
                      to="/services/digital-marketing"
                      className="block px-5 py-2.5 text-sm text-gray-600 hover:text-primary rounded-lg hover:bg-white"
                      onClick={toggleMenu}
                    >
                      Digital Marketing
                    </Link>
                  </div>
                )}
              </div>
              <Link
                to="/about"
                className="block px-5 py-3 text-base font-medium text-gray-700 hover:text-primary rounded-xl hover:bg-gray-50 transition-all duration-200"
                onClick={toggleMenu}
              >
                About
              </Link>
              <Link
                to="/portfolio"
                className="block px-5 py-3 text-base font-medium text-gray-700 hover:text-primary rounded-xl hover:bg-gray-50 transition-all duration-200"
                onClick={toggleMenu}
              >
                Portfolio
              </Link>
              
              {/* Account Dropdown in Mobile */}
              <div>
                <button
                  onClick={() => setMobileAccountDropdown(!mobileAccountDropdown)}
                  className="flex justify-between items-center w-full px-5 py-3 text-base font-medium text-gray-700 hover:text-purple-600 rounded-xl hover:bg-gray-50 transition-all duration-200"
                >
                  {!localLoading && user ? (
                    <div className="flex items-center">
                      <div className="h-8 w-8 rounded-full overflow-hidden bg-purple-100 border-2 border-purple-200 flex items-center justify-center mr-3">
                        {user.user_metadata?.avatar_url ? (
                          <img 
                            src={user.user_metadata.avatar_url} 
                            alt="Profile" 
                            className="h-full w-full object-cover"
                          />
                        ) : (
                          <span className="text-purple-600 font-bold text-sm">
                            {user.email?.charAt(0).toUpperCase() || 'U'}
                          </span>
                        )}
                      </div>
                      <span>{user.user_metadata?.full_name || user.email?.split('@')[0] || 'Profile'}</span>
                    </div>
                  ) : (
                    <span>Account</span>
                  )}
                  <FiChevronDown className={`transition-transform duration-300 ${mobileAccountDropdown ? 'transform rotate-180 text-purple-600' : ''}`} />
                </button>
                {mobileAccountDropdown && (
                  <div className="pl-5 space-y-1 mt-2 mb-2 bg-gray-50/50 rounded-xl py-2">
                    {user ? (
                      <>
                        <Link
                          to="/profile"
                          className="flex items-center px-5 py-2.5 text-sm text-gray-600 hover:text-purple-600 rounded-lg hover:bg-white"
                          onClick={toggleMenu}
                        >
                          <FiUser className="h-4 w-4 mr-2 text-gray-500" />
                          My Profile
                        </Link>
                        <Link
                          to="/purchases"
                          className="flex items-center px-5 py-2.5 text-sm text-gray-600 hover:text-purple-600 rounded-lg hover:bg-white"
                          onClick={toggleMenu}
                        >
                          <FiShoppingBag className="h-4 w-4 mr-2 text-gray-500" />
                          My Purchases
                        </Link>
                        <Link
                          to="/settings"
                          className="flex items-center px-5 py-2.5 text-sm text-gray-600 hover:text-purple-600 rounded-lg hover:bg-white"
                          onClick={toggleMenu}
                        >
                          <FiSettings className="h-4 w-4 mr-2 text-gray-500" />
                          Account Settings
                        </Link>
                        <div className="border-t border-gray-100 my-1"></div>
                        <button
                          onClick={() => {
                            handleSignOut();
                            toggleMenu();
                          }}
                          className="flex items-center w-full text-left px-5 py-2.5 text-sm text-gray-600 hover:text-red-600 rounded-lg hover:bg-white"
                        >
                          <FiLogOut className="h-4 w-4 mr-2 text-gray-500" />
                          Sign Out
                        </button>
                      </>
                    ) : (
                      <>
                        <Link
                          to="/login"
                          className="flex items-center px-5 py-2.5 text-sm text-gray-600 hover:text-purple-600 rounded-lg hover:bg-white"
                          onClick={toggleMenu}
                        >
                          <FiUser className="h-4 w-4 mr-2 text-gray-500" />
                          Login
                        </Link>
                        <Link
                          to="/signup"
                          className="flex items-center px-5 py-2.5 text-sm text-gray-600 hover:text-purple-600 rounded-lg hover:bg-white"
                          onClick={toggleMenu}
                        >
                          <FiUser className="h-4 w-4 mr-2 text-gray-500" />
                          Sign Up
                        </Link>
                      </>
                    )}
                )}
              </div>
              <div className="mt-5 pt-5 border-t border-gray-100 space-y-4">
                <Link
                  to="/get-started"
                  className="block px-5 py-3.5 text-base font-medium text-white bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 rounded-xl transition-all duration-300 shadow-md text-center"
                  onClick={toggleMenu}
                >
                  Get Started <span className="ml-2">Ã¢â€ â€™</span>
                </Link>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
      </AnimatePresence>
    </>
  );
};

export default Navbar;








